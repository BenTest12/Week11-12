name: CICDPipe

trigger:
- master
- feature/*

resources:
- repo: self

# Continuous Integration Process.
stages:
- stage: Build
  displayName: Install Docker-Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: "ci-group"
    steps:
    - task: Docker@2
      displayName: Build and push image
      inputs:
        containerRegistry: 'bendockerreg'
        repository: 'weightapprepo'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'


    - upload: manifests
      artifact: manifests
    
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: Deploy staging stage
  jobs:
  - deployment: Deploy
    displayName: Deploy to staging
    pool:
      name: "ci-group"
    environment: 'staging.default'
    variables:
      - group: "staging-vars"
    strategy:
      runOnce:
        deploy:
         steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'staging-env'
                secretType: 'generic'
                secretName: 'secret.yml'
                secretArguments: '--from-literal=COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) --from-literal=HOST=$(HOST) --from-literal=PORT=$(PORT) --from-literal=NODE_ENV=$(NODE_ENV) --from-literal=HOST_URL=$(HOST_URL) --from-literal=OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) --from-literal=OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) --from-literal=OKTA_ORG_URL=$(OKTA_ORG_URL) --from-literal=PGHOST=$(PGHOST) --from-literal=PGUSERNAME=$(PGUSERNAME) --from-literal=PGDATABASE=$(PGDATABASE) --from-literal=PGPASSWORD=$(PGPASSWORD) --from-literal=POSTGRES_PASSWORD=$(PGPASSWORD) --from-literal=PGPORT=$(PGPORT)'

            - task: KubernetesManifest@0
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: 'staging-env'
                manifests: | 
                  $(Pipeline.workspace)/manifests/dbnodeport.yml
                  $(Pipeline.workspace)/manifests/db.yml
                  
                containers: |
                  postgresql

            - task: KubernetesManifest@0
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: 'staging-env'
                manifests: | 
                  $(Pipeline.workspace)/manifests/ingress.yml
                  $(Pipeline.workspace)/manifests/weightapp.yml
                  $(Pipeline.workspace)/manifests/weightappclusterip.yml
                  
                containers: |
                  ben1214test.azurecr.io/weightapprepo:$(Build.BuildId)

            - task: Kubernetes@1
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'staging-env'
                command: 'apply'
                useConfigurationFile: true
                configuration: 'manifests/weightapp.yml'
                secretType: 'generic'
                secretName: 'secret.yml'